Free Flutter Course (Full Flutter Course for Beginners)
https://www.youtube.com/playlist?list=PL6yRaaP0WPkVtoeNIGqILtRAgd3h2CNpT

*** My Notes App ***

Chapter 8 - Project Setup

* Adding dependencies (firebase_core, firebase_auth, cloud_firestore, firebase_analytics):
    flutter pub add <dependency>   - Adds dependency to pubspec.yaml and downloads it.


Chapter 10 - Android App Setup

* Android SDK (Host and Devcontainer)
* USB Debugging (on device, developer options)
* Setup ADB (Android Debug Bridge) on both Windows Host and DevEnv (if using devcontainer)
* Disable screen sleeping (on device, developer options)
* Android Mirroring (Optional):
    https://github.com/Genymobile/scrcpy/

* Enabling Multi-Dex (Optional, for projects with a lot of dependencies, exceeding 65,536 methods (including your code + libraries))
    - Check (if build is successful, multi-dex NOT required)
    - If execution fails with error: Method count exceeds 64K
    android/gradlew app:dependencies
    - Enable (if required) - add to android/app/build.gradle.kts, then do a clean build
        android {
            defaultConfig {
                multiDexEnabled = true // <-- Enable MultiDex
            }
        }

* WHEN YOU WANT A CLEAN BUILD:
    ** sometimes required after adding new dependencies and encountering errors
    flutter clean       # remove old build artifacts (After upgrading dependencies or changing Gradle/Android/iOS configurations)
    flutter pub get     # fetch dependencies (After adding or updating a dependency in pubspec.yaml)
    flutter build apk   # build the Android APK
        options:
            flutter build apk --debug → Debug APK
            flutter build apk --release → Optimized release APK


Chapter 11 - firebase
* Add firebase dependencies to flutter project(firebase_core, firebase_auth, cloud_firestore, firebase_analytics):
    flutter pub add firebase_core firebase_auth cloud_firestore firebase_analytics

* Login to Firebase using Google account - (https://console.firebase.google.com/)
    - Create Firebase Project

* Install Firebase CLI - (https://firebase.google.com/docs/cli#install-cli-mac-linux)
    - Using automatic script:
        curl -sL https://firebase.tools | bash
    - Login:
        firebase login
    - Test the CLI - accessing your account and listing your Firebase projects:
        firebase projects:list
    - Update to latest version (optional use with "sudo", if permissions issues)
        curl -sL https://firebase.tools | upgrade=true bash
    - If you want to uninstall the CLI - use script again (sudo - if permissions issues):
        curl -sL https://firebase.tools | uninstall=true bash

* Install FlutterFireCLI and add to path
    - Install and add to path:
        dart pub global activate flutterfire_cli
        export PATH=$HOME/.pub-cache/bin:$PATH
    - Add permanently to ~/.bashrc
        echo 'export PATH=$HOME/.pub-cache/bin:$PATH' >> ~/.bashrc

* Configure the backend:
    - Run configuration, choose project(from firebase) and platforms to be supported (android, ios, web):
        flutterfire configure


Chapter 12 - Basic Registration Screen  (Incomplete)

* Hot reload/restart
    - hot reload - apply code changes to a running app (on device) without resetting state
    - hot restart - apply code changes and reset state
* State - any data that can change over time and affect what is displayed on the screen
* Stateless vs Stateful
    - Stateful - widget that contains mutable variables, contains information that can be changes
    - Stateless - widget that does not contain any mutable information

* Scaffold - a top-level layout widget that provides the basic visual structure for a screen in a Material Design app
    Key Features of Scaffold
    - appBar – The top bar of the screen.
    - body – The main content area.
    - drawer – A side navigation drawer.
    - bottomNavigationBar – For navigation tabs at the bottom.
    - floatingActionButton (FAB) – A prominent circular action button.
    - snackBars & bottomSheets – Easily show temporary messages or modals.


Chapter 13 - Login View

Chapter 14 - Separating App Initialization from Login and Register Screens

Chapter 15 - Setting up Git and GitHub (written in separate file)

Chapter 16 - Email Verification View

Chapter 17 - Link Between Login and Register View

Chapter 18 - Logout View

Chapter 19 - Go From Login to Notes View

Chapter 20 - Cleaning Up our Routes

Chapter 21 - Error Handling in LoginView

Chapter 22 - Error Handling in Register View, Next Screen After Registration

Chapter 23 - Confirming Identity Before Going to Main UI

Chapter 24 - Auth Service

Chapter 25 - Migrating to Auth Service

Chapter 26 - Unit Testing our AuthService
* Adding dev dependencies to a project
    flutter pub add <dependency> --dev
    flutter pug add test --dev


Chapter 27 - CRUD Local Storage (SQLite)
* Required additional dependencies: sqflite, path, path_provider
    flutter pub add sqflite
    flutter pub add path_provider
    flutter pub add path


Chapter 28 - Working with Streams in Notes Service

Chapter 29 - Preparing Notes View to Read All Notes

Chapter 30 - Preparing to Create New Notes

Chapter 31 - Creating New Notes

Chapter 32 - Displaying Notes in Notes View

Chapter 33 - Deleting Existing Notes in Notes View

Chapter 34 - Updating Existing Notes

Chapter 35 - Protecting NotesService with Current User

Chapter 36 - Writing Notes to Cloud Firestore
https://firebase.google.com/docs/firestore

* Creating a FireStore Database
    - In the FireBase Console, go to FireStore Database, Create Database
        - Choose Edition (Standard), Location, and Mode (Test Mode)
* Editing Security Rules
    - Allow read / write only if the user is authenticated.
    This gives access to every authenticated user to all the database, not very secure

    rules_version = '2';
    service cloud.firestore {
        match /databases/{database}/documents {
            match /{document=**} {
                allow read, write: if request.auth != null;
            }
        }
    }



* Create a collection
    Collection - a group of related objects (documents)
    - Start a collection - Collection ID - ""notes"
        A document - each document will be an individual note
        - Add a new document with Auto ID and 2 fields:
            "text" type string
            "user_id" type string
        - Once collection is created delete the empty document, so we are left with an empty Collection

We are going to user User.uid as the "user_id" field for each document.


Chapter 37 - Migrating to our Firestore Service
**** - lib_before_crud_migration_backup/    -> backup whole project before migrating crud service to FireStore


Chapter 38 - Sharing Notes
* Installing Share Plus plugin (https://pub.dev/packages/share_plus)
    flutter pub add share_plus
* Usage
    import 'package:share_plus/share_plus.dart';

    * Share.share() - deprecated

    SharePlus.instance.share(
    ShareParams(text: 'check out my website https://example.com')
    );


Chapter 39 - Introduction to BLoC (Business Logic Component)
* Add BLoC dependencies: bloc, flutter_bloc
    flutter pub add bloc flutter_bloc

**** Example Counter App in main.dart


Chapter 40 - Converting our Auth Process to Bloc
*** - lib_before_auth_to_bloc/    -> backup whole project before converting Auth process to BLoC


Chapter 41 - Handling Auth Bloc Exceptions During Login

Chapter 42 - Moving to Bloc for Routing and Dialogs
* Add "equatable" package (https://pub.dev/packages/equatable)
    flutter pub add equatable


Chapter 43 - Loading Screens

Chapter 44 - Final Touches Before App Release

Chapter 45 - App Icons and App Name (complete)
*** Updating the app icon
    * stockio.com   ---> Free photos, vectors, icons...
    * appicon.co    ---> generate mobile icons from .svg
    * Install Flutter Launcher Icons package  ---> https://pub.dev/packages/flutter_launcher_icons
        - command-line tool for updating the app's launcher icon
        flutter pub add flutter_launcher_icons
        dart run flutter_launcher_icons:generate
        - place .png icon file in assets/icon/icon.png (as per flutter_launcher_icons.yaml file)
        - execute:
        flutter pub run flutter_launcher_icons
*** Changing the app name (may need a clean build)
    * iOS - edit ios/Runner/Info.plist
        - <key>CFBundleDisplayName</key>
            <string>MyNotes</string/
        - <key>CFBundleName</key>  (optional, this is actually the binary name, not what the user sees)
            <string>MyNotes</string>
    * Android - edit android/app/src/main/AndroidManifest.xml
        - android:label="MyNotes"

Chapter 46 - Splash Screen
*** for iOS - LaunchScreen.storyboard file, edit via xcode (requires a mac)
*** Design a splash screen in Figma
    * Export in 1x, 2x, 3x for iOS
*** for Android - https://developer.android.com/develop/ui/views/launch/splash-screen
    * Image resolution for mdpi, hdpi, xhdpi and xxhdpi
    https://stackoverflow.com/questions/28507609/image-resolution-for-mdpi-hdpi-xhdpi-and-xxhdpi
    * Export with suffixes in 1x - mdpi, 1.5x - hdpi, 2x - xhdpi, 3x - xxhdpi, 4x - xxxhdpi
        - Rename each file to splash.png and place in the corresponding folder
            android/app/main/res/mipmap  --> according to suffix
    * Edit in 2 files:
        - android/app/src/main/res/values/styles.xml
        - android/app/src/main/res/values-night/styles.xml
        - Edit item "android:windowBackground" under parent "Launch Theme" to:
            "@mipmap/splash"


Chapter 47 - Sending our iOS app to App Store Connect
*** App Store Connect - the developer portal to the app store

Chapter 48 - Releasing our iOS App

Chapter 49 - Fixing Firebase Security Rules and Resubmitting the iOS App
    *** Firestore security rules
    https://firebase.google.com/docs/firestore/security/rules-conditions

    - Update Firestore security rules to allow read, update, delete only on notes
    from the current user

    service cloud.firestore {
        match /databases/{database}/documents {
            match /{document=**} {
                allow read, update, delete: if request.auth != null
                    && request.auth.uid == resource.data.user_id;
                allow create: if request.auth != null;
            }
        }
    }

    - Update allNotes() function in firebase_cloud_storage.dart


Chapter 50 - Releasing our Android App
    https://developer.android.com/distribute/console
*** Sign up for a developer account:
    https://play.google.com/console


Chapter 51 - Localization in Flutter
https://docs.flutter.dev/ui/accessibility-and-internationalization/internationalization
* i18n -> internationalization
* l10n -> localization

*** Add dependencies in pubspec.yaml
    flutter pub add flutter_localizations --sdk=flutter
    flutter pub add intl:any
    Should look like this:
    dependencies:
        flutter:
            sdk: flutter
        flutter_localizations:
            sdk: flutter
        intl: any

*** Enable automatic code generation in pubspec.yaml
    flutter:
        generate: true

*** Support for iOS - Add supported localizations to ios/Runner/info.plist using:
    - Inside <dict> place:
        <key>CFBundleLocalizations</key>
        <array>
            <string>en</string>
            <string>sv</string>
        </array>

*** Create l10n.yaml file in project root folder
    - l10n.yaml content:
        arb-dir: lib/l10n
        template-arb-file: intl_en.arb
        output-localization-file: app_localizations.dart

*** What are .ARB files (Application Resource Bundle)
    Basically JSON files (key-value)
        keys - a handle for the application to reach into the localization and grab a string
        value - the actual strings that need to be displayed for the specific language
    Can also include logic, for example for plural/singular words based on the number of notes you have

*** Create /lib/l10n/intl_en.arb  and  intl_sv.arb files
    These files will contain the actual localization strings
