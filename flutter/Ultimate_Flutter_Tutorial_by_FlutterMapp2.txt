The Ultimate Flutter Tutorial for Beginners - 2025 Full Course, by Flutter Mapp
https://www.youtube.com/watch?v=3kaGC_DrUnw

Chapters
🚀 1. Key Concepts
    00:00:00​ Create a project
    00:02:22 Widget inside Widget
    00:04:56 Widget vs Argument
    00:07:12 Types
    00:09:30 Mouse over

📐 2. Basic Layouts
    00:12:12 Container
    00:16:48 Column
    00:22:10 Row
    00:25:22 Center
    00:27:17 Images
    00:32:06 Extensions (only for VS code)
    00:33:27 Stack
    00:35:48 Padding
    00:36:46 SizedBox
    00:37:33 Icon
    00:38:56 ListTile
    00:40:59 print
    00:41:47 Wrap

🐦‍🔥 3. Master Layout
    00:43:17 MaterialApp & Scaffold
    00:47:21 AppBar
    00:50:05 NavigationBar
    00:53:53 FloatingActionButton
    00:56:11 Drawer
    00:57:53 SafeArea

🔧 4. Debugging
    00:59:49 Type 1
    01:01:20 Type 2
    01:05:26 Null Safety

⚡ 5. States
    01:07:19 Stateful
    01:11:42 Recap
    01:17:18 Split your Widgets
    01:20:30 Widget Tree
    01:25:12 ValueNotifier
    01:31:41 Challenge
    01:34:30 Solution

🖋️ 6. User Inputs
    01:38:32 TextField
    01:42:33 Checkbox
    01:45:09 Arrow function
    01:46:15 Switch
    01:47:57 .adaptive
    01:49:11 Slider
    01:51:12 SingleChildScrollView
    01:52:51 GestureDetector
    01:54:01 InkWell
    01:55:34 Buttons
    01:59:07 DropdownButton

🗺️ 7. Navigation
    Navigator() is a Flutter widget and class that manages a stack of routes (screens). It lets you navigate
    between pages, push new screens, and pop back to previous ones — like a web browser’s history.
    * Stack-based navigation:
        - Each screen is a route.
        - You can push (go forward) or pop (go back).

    Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => SecondPage()),
        );
    Navigator.pop(context);
    🧱 Common methods:
        push()	Opens a new route (screen) and adds it to the stack
        pop()	Closes the current route and goes back
        pushReplacement()	Replaces the current route with a new one
        pushNamed() / popNamed()	Navigate using route names (defined in MaterialApp)
        canPop()	Checks if there’s a route to go back to
    📌 Tip:
        Use Navigator.pushNamed() for cleaner navigation when you have multiple screens.
        For modern navigation, consider go_router or Navigator 2.0 (Router API) for complex apps.
        Navigator works perfectly with Scaffold for building multi-screen apps.

    02:02:34 Push
        Navigator.push() is used to navigate to a new screen (route) by pushing it onto the navigation stack.
        It shows the new screen on top of the current one, allowing the user to go back later with Navigator.pop().
        Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => NextPage()),
        );
        🧱 Parameters:
            context → The current widget’s build context.
            route → The route (page/screen) to display, usually a MaterialPageRoute.
        📌 Tip:
            Use Navigator.pushNamed() if you’ve defined named routes in MaterialApp.
            Always use Navigator.pop(context) to return to the previous screen.
            Navigator.push() returns a Future that completes when the new route is popped — useful for receiving results back.

    02:02:34 Pop
        Navigator.pop() is used to close the current screen (or route) and go back to the previous one.
        It’s the reverse of Navigator.push().
        When called, it pops the top route off the navigation stack.

        Navigator.pop(context);

        🧱 Parameters:
            context → The current widget’s build context.
            result (optional) → Data you can return to the previous screen.
        📌 Tip:
            Navigator.pop() works only if a route was pushed before.
            You can return data by passing it as the second argument.
            Use it to close dialogs, modals, or bottom sheets too (not just pages).

    02:09:16 PushReplacement
        Navigator.pushReplacement() is used to navigate to a new screen while replacing the current one.
        That means the previous screen is removed from the navigation stack — the user cannot go back using the back button.
        It’s often used for navigation flows like login → home screen or splash → main app.

        Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => NewScreen()),
        );
        🧱 Parameters:
            context → current widget’s BuildContext
            route → the route (screen) to replace with
            result (optional) → data returned to the replaced route
        📌 Tip:
            Use pushReplacement() when you don’t want users to return to the previous screen.
            For example:
            After login → home screen
            After splash → main app
            After onboarding → main content
            If you need to remove all previous routes, use:
            Navigator.pushAndRemoveUntil(
                context,
                MaterialPageRoute(builder: (context) => HomeScreen()),
                (route) => false, // removes all previous routes
            );

    02:10:59 Send Data Through pages
        To send data through to pages - use a required named parameter as an input


👾 8. Clean UI
    02:13:18 ClipRRect
        ClipRRect is a widget that clips its child using a rounded rectangle.
        It’s commonly used to give widgets like images, containers, or cards
        rounded corners. RRect stands for “rounded rectangle”.

        ClipRRect(
            borderRadius: BorderRadius.circular(12),
            child: Image.asset('assets/image.png'),
        );

    🧱 Common properties:
        borderRadius → controls the roundness of the corners
        clipBehavior → defines how clipping is applied (e.g., Clip.antiAlias, Clip.hardEdge)
        child → the widget to be clipped
    📌 Tip:
        ClipRRect only clips the visible area — it doesn’t affect the layout.
        For rounded corners on Container backgrounds, you can also use BoxDecoration with borderRadius.
        Use ClipOval if you want to make a circle or ellipse shape instead.

    02:17:40 Hero


    02:22:14 SnackBar
    02:25:29 Alert
    02:29:06 Divider
    02:30:40 Card
    02:33:36 Text

📦 9. Packages
    02:36:57 Lotties
    02:43:17 FittedBox
    02:46:50 UI modification
    02:54:33 Overrides
    02:56:49 UI modification
    03:01:20 UI modification (again)
    03:06:49 Verify and fix your App
    03:14:33 UI modification
    03:18:30 Shared Preferences
    03:26:33 UI modification
    03:37:57 UI modification (again)
    03:43:43 UI modification (again & again)
    03:55:57 Flutter Launcher Icons
    04:01:44 CircleAvatar

📱 10. Responsive UI
    04:07:48 FractionallySizedBox
    04:09:55 LayoutBuilder
    04:12:41 MediaQuery
    04:14:42 AspectRatio
    04:17:40 Expanded & Flexible

🌐 11. Networking
    04:26:42 Intro
    04:29:00 Get
    04:37:56 Explain
    04:41:24 Class
    04:47:07 FutureBuilder
    04:53:41 AI

🎯 12. Next Steps
    04:58:50 Let's talk about State Management
    05:00:59 Internationalizing
    05:02:12 Firebase
    05:03:25 Publish
    05:04:30 Animations
    05:10:14 The end.
