The Ultimate Flutter Tutorial for Beginners - 2025 Full Course, by Flutter Mapp
https://www.youtube.com/watch?v=3kaGC_DrUnw

Chapters
🚀 1. Key Concepts
    00:00:00​ Create a project
    00:02:22 Widget inside Widget
    00:04:56 Widget vs Argument
    00:07:12 Types
    00:09:30 Mouse over

📐 2. Basic Layouts
    00:12:12 Container
    00:16:48 Column
    00:22:10 Row
    00:25:22 Center
    00:27:17 Images
    00:32:06 Extensions (only for VS code)
    00:33:27 Stack
    00:35:48 Padding
    00:36:46 SizedBox
    00:37:33 Icon
    00:38:56 ListTile
    00:40:59 print
    00:41:47 Wrap

🐦‍🔥 3. Master Layout
    00:43:17 MaterialApp & Scaffold
    00:47:21 AppBar
    00:50:05 NavigationBar
    00:53:53 FloatingActionButton
    00:56:11 Drawer
    00:57:53 SafeArea

🔧 4. Debugging
    00:59:49 Type 1
    01:01:20 Type 2
    01:05:26 Null Safety

⚡ 5. States
    01:07:19 Stateful
    01:11:42 Recap
    01:17:18 Split your Widgets
    01:20:30 Widget Tree
    01:25:12 ValueNotifier
    01:31:41 Challenge
    01:34:30 Solution

🖋️ 6. User Inputs
    01:38:32 TextField
    01:42:33 Checkbox
    01:45:09 Arrow function
    01:46:15 Switch
    01:47:57 .adaptive
    01:49:11 Slider
    01:51:12 SingleChildScrollView
    01:52:51 GestureDetector
    01:54:01 InkWell
    01:55:34 Buttons
    01:59:07 DropdownButton

🗺️ 7. Navigation
    Navigator() is a Flutter widget and class that manages a stack of routes (screens). It lets you navigate
    between pages, push new screens, and pop back to previous ones — like a web browser’s history.
    * Stack-based navigation:
        - Each screen is a route.
        - You can push (go forward) or pop (go back).

    Navigator.push(
        context,
        MaterialPageRoute(builder: (context) => SecondPage()),
        );
    Navigator.pop(context);
    🧱 Common methods:
        push()	Opens a new route (screen) and adds it to the stack
        pop()	Closes the current route and goes back
        pushReplacement()	Replaces the current route with a new one
        pushNamed() / popNamed()	Navigate using route names (defined in MaterialApp)
        canPop()	Checks if there’s a route to go back to
    📌 Tip:
        Use Navigator.pushNamed() for cleaner navigation when you have multiple screens.
        For modern navigation, consider go_router or Navigator 2.0 (Router API) for complex apps.
        Navigator works perfectly with Scaffold for building multi-screen apps.

    02:02:34 Push
        Navigator.push() is used to navigate to a new screen (route) by pushing it onto the navigation stack.
        It shows the new screen on top of the current one, allowing the user to go back later with Navigator.pop().
        Navigator.push(
            context,
            MaterialPageRoute(builder: (context) => NextPage()),
        );
        🧱 Parameters:
            context → The current widget’s build context.
            route → The route (page/screen) to display, usually a MaterialPageRoute.
        📌 Tip:
            Use Navigator.pushNamed() if you’ve defined named routes in MaterialApp.
            Always use Navigator.pop(context) to return to the previous screen.
            Navigator.push() returns a Future that completes when the new route is popped — useful for receiving results back.

    02:02:34 Pop
        Navigator.pop() is used to close the current screen (or route) and go back to the previous one.
        It’s the reverse of Navigator.push().
        When called, it pops the top route off the navigation stack.

        Navigator.pop(context);

        🧱 Parameters:
            context → The current widget’s build context.
            result (optional) → Data you can return to the previous screen.
        📌 Tip:
            Navigator.pop() works only if a route was pushed before.
            You can return data by passing it as the second argument.
            Use it to close dialogs, modals, or bottom sheets too (not just pages).

    02:09:16 PushReplacement
        Navigator.pushReplacement() is used to navigate to a new screen while replacing the current one.
        That means the previous screen is removed from the navigation stack — the user cannot go back using the back button.
        It’s often used for navigation flows like login → home screen or splash → main app.

        Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => NewScreen()),
        );
        🧱 Parameters:
            context → current widget’s BuildContext
            route → the route (screen) to replace with
            result (optional) → data returned to the replaced route
        📌 Tip:
            Use pushReplacement() when you don’t want users to return to the previous screen.
            For example:
            After login → home screen
            After splash → main app
            After onboarding → main content
            If you need to remove all previous routes, use:
            Navigator.pushAndRemoveUntil(
                context,
                MaterialPageRoute(builder: (context) => HomeScreen()),
                (route) => false, // removes all previous routes
            );

    02:10:59 Send Data Through pages
        To send data through to pages - use a required named parameter as an input


👾 8. Clean UI
    02:13:18 ClipRRect
        ClipRRect is a widget that clips its child using a rounded rectangle.
        It’s commonly used to give widgets like images, containers, or cards
        rounded corners. RRect stands for “rounded rectangle”.

        ClipRRect(
            borderRadius: BorderRadius.circular(12),
            child: Image.asset('assets/image.png'),
        );

    🧱 Common properties:
        borderRadius → controls the roundness of the corners
        clipBehavior → defines how clipping is applied (e.g., Clip.antiAlias, Clip.hardEdge)
        child → the widget to be clipped
    📌 Tip:
        ClipRRect only clips the visible area — it doesn’t affect the layout.
        For rounded corners on Container backgrounds, you can also use BoxDecoration with borderRadius.
        Use ClipOval if you want to make a circle or ellipse shape instead.

    02:17:40 Hero
        Hero is a widget that provides a shared element transition between two routes (screens).
        When you navigate to another page, the Hero widget animates the transition of a matching
        widget smoothly between the screens.
        This is great for image previews, profile pictures, or cards that expand into detail pages.

        Hero(
            tag: 'hero-tag',
            child: Image.asset('assets/image.png'),
        );

        ⚡ Important:
            Both the source and destination Hero must have the same tag.
            The tag must be unique for each Hero pair.
        🧱 Common properties:
            tag → unique identifier to match Hero widgets between screens.
            child → the widget to animate.
            flightShuttleBuilder → optional, allows customizing the animation look.
            transitionOnUserGestures → allows transitions during back gesture (iOS).
        📌 Tip:
            Hero animations work best with images or simple widgets.
            Always use the same tag on both widgets.
            Works automatically with Navigator.push() and Navigator.pop().
            You can wrap any widget in a Hero—not just images!
        🧭 Common use cases:
            Profile avatar → profile page
            Thumbnail image → fullscreen view
            Card preview → detail screen

    02:22:14 SnackBar
        SnackBar is a lightweight message displayed at the bottom of the screen to provide
        brief feedback to the user. It can include a simple message, an action (like “UNDO”),
        and disappears automatically after a few seconds.

        ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
                content: Text('This is a SnackBar!'),
            ),
        );

        🧱 Common properties:
            content → the main widget, usually a Text.
            backgroundColor → sets the background color of the snackbar.
            action → adds an optional button (e.g., “Undo”).
            duration → how long it stays visible.
            behavior → e.g., SnackBarBehavior.floating to make it float above UI.
            shape → gives rounded corners or custom shapes.
        📌 Tip:
            Always use ScaffoldMessenger.of(context) instead of the old Scaffold.of(context) (deprecated).
            SnackBar disappears automatically, but you can also dismiss it programmatically.
            Great for quick feedback like “Saved”, “Copied”, “Deleted”, etc.

    02:25:29 Alert - showDialog(), AlertDialog(), AboutDialog(), showAboutDialog()

        *** showDialog() is a built-in function used to display a modal dialog on top of the current screen.
        It blocks interaction with the rest of the app until the dialog is dismissed.
        It’s commonly used with widgets like AlertDialog or SimpleDialog.

        showDialog(
            context: context,
            builder: (BuildContext context) {
                return AlertDialog(
                    title: Text('Dialog Title'),
                    content: Text('This is the content of the dialog.'),
                    actions: [
                        TextButton(
                            onPressed: () => Navigator.pop(context),
                            child: Text('Close'),
                        ),
                    ],
                );
            },
        );

        🧱 Common parameters:
            context → required. The build context of the current widget.
            builder → returns the widget to display (e.g., AlertDialog).
            barrierDismissible → whether tapping outside closes the dialog (true by default).
            barrierColor → color behind the dialog (e.g., semi-transparent black).
            useSafeArea → ensures it doesn’t overlap system UI.
            useRootNavigator → decides which navigator to use.
        📌 Tips:
            Always use Navigator.pop(context) to close the dialog.
            Return values can be passed from the dialog to the previous screen using Navigator.pop(context, value).
            You can also use showModalBottomSheet() for bottom popups.
        🧭 Common use cases:
            Confirmation dialogs (e.g., Delete / Cancel)
            Error or success messages
            Custom forms or widgets inside a popup


        *** AlertDialog() is a material design dialog that alerts the user to a situation and provides optional
        actions (e.g., OK / Cancel). It usually contains a title, a content message, and action buttons.

        showDialog(
            context: context,
            builder: (context) {
                return AlertDialog(
                    title: Text('Alert'),
                    content: Text('This is an alert message.'),
                    actions: [
                        TextButton(
                            onPressed: () => Navigator.pop(context),
                            child: Text('Cancel'),
                        ),
                        TextButton(
                            onPressed: () {
                                // Do something
                                Navigator.pop(context);
                            },
                            child: Text('OK'),
                        ),
                    ],
                );
            },
        );

        🧱 Common properties:
            title → top of the dialog (usually Text).
            content → main message or widget.
            actions → list of buttons (e.g., TextButton).
            shape → customize the border shape.
            backgroundColor → set background color.

        *** AboutDialog() is a prebuilt widget that displays information about your app, such as its name, version,
        icon, and legal details. It’s typically used in “About” sections of apps.

        showDialog(
            context: context,
            builder: (context) {
                return AboutDialog(
                    applicationName: 'My Flutter App',
                    applicationVersion: '1.0.0',
                    applicationIcon: Icon(Icons.info),
                    applicationLegalese: '© 2025 My Company',
                );
            },
        );
        🧱 Common properties:
            applicationName → Name of your app.
            applicationVersion → Version number of the app.
            applicationIcon → Icon widget shown at the top.
            applicationLegalese → Legal text or copyright.
            children → Extra widgets for additional info.
        🧭 Common use cases:
            Adding an “About” section in your settings page.
            Displaying app version and legal info.
            Showing credits or acknowledgements.
        📌 Tip:
            AlertDialog is used for actions and confirmations.
            AboutDialog is used for static info about the app.
            Both appear on top of the UI and block interaction until dismissed.

        *** showAboutDialog() is a built-in function that quickly displays an “About” dialog with your app’s
        information (name, version, icon, legal text, etc.).
        It’s a shortcut for showing an AboutDialog widget without manually wrapping it in showDialog().

        showAboutDialog(
            context: context,
            applicationName: 'My Flutter App',
            applicationVersion: '1.0.0',
            applicationIcon: Icon(Icons.info),
            applicationLegalese: '© 2025 My Company',
            children: [
                Text('This app is built with Flutter.'),
            ],
        );

        🧱 Common parameters:
            context → required, the build context of the current widget.
            applicationName → name of your app.
            applicationVersion → version number.
            applicationIcon → widget displayed at the top (e.g., app icon).
            applicationLegalese → legal text or copyright notice.
            children → optional extra widgets to display below the legalese.
        📌 Difference between AboutDialog and showAboutDialog():
            🧱 AboutDialog → Widget (you can use it inside your own showDialog).
            ⚡ showAboutDialog() → Function (displays the dialog immediately with less boilerplate).
        🧭 Common use cases:
            “About” section in settings screens.
            Displaying app version and copyright.
            Giving credits or contact info.

    02:29:06 Divider + VerticalDivider
        Divider() is a simple horizontal line used to visually separate content in a layout — for example,
        between list items or sections. It’s lightweight and commonly used in Column or ListView widgets.

        Divider(
            color: Colors.teal,
            thickness: 5.0,
            endIndent: 200,
        ),
        🧱 Common properties:
            color → color of the line.
            thickness → how thick the line is.
            height → total vertical space the divider takes (includes padding).
            indent → empty space at the start of the line.
            endIndent → empty space at the end of the line.
        📌 Tip:
            Use VerticalDivider() if you want a vertical line (e.g., in Row).
            Divider automatically takes the full available width unless indents are applied.
            It’s purely decorative — doesn’t affect layout structure beyond spacing.

    02:30:40 Card
        Card is a material design container with rounded corners, elevation (shadow), and padding. It’s commonly
        used to group related information like images, text, and buttons in a visually distinct box.
        Card(
            child: Padding(
                padding: EdgeInsets.all(16),
                child: Text('This is a simple card'),
            ),
        );
        🧱 Common properties:
            child → the content inside the card.
            color → background color.
            elevation → shadow depth; higher values create bigger shadows.
            shape → custom border shape (e.g., rounded corners).
            margin → space around the card.
            clipBehavior → how child content is clipped (useful for images).
        📌 Tip:
            Cards automatically follow Material Design principles with shadows and rounded corners.
            Use ClipRRect or clipBehavior to ensure images inside the card respect the border radius.
            Cards are perfect for lists of items, product previews, or info panels.

    02:33:36 Text
        Text() is the most basic widget for displaying a string of text in Flutter.
        You can style it, align it, and control how it behaves inside layouts.
        Text('Hello, Flutter!');
        🧱 Common properties:
            style → customize font size, color, weight, etc. (TextStyle)
            textAlign → horizontal alignment (TextAlign.left, .center, .right)
            overflow → handling text overflow (TextOverflow.ellipsis, .fade)
            maxLines → maximum number of lines to display
            softWrap → whether text wraps at soft line breaks
        📌 Tip:
            Use Text for any static or dynamic text display.
            For clickable or styled parts of text, combine Text.rich with GestureRecognizer.
            Always consider wrapping Text in a Flexible or Expanded when inside Row or Column to prevent overflow.


📦 9. Packages
    02:36:57 Lottie
        Create, manage and implement lightweight animations across websites,
        apps, presentations, social and more. https://lottiefiles.com/
        * Install package:
            https://pub.dev/packages/lottie
            flutter pub add lottie
        * How to use:
            https://pub.dev/packages/lottie/example

            Use as a basic widget:
            Lottie.asset('path/to/asset/lottie.json'),

    02:43:17 FittedBox
    02:46:50 UI modification
    02:54:33 Overrides
    02:56:49 UI modification
    03:01:20 UI modification (again)
    03:06:49 Verify and fix your App
    03:14:33 UI modification
    03:18:30 Shared Preferences
    03:26:33 UI modification
    03:37:57 UI modification (again)
    03:43:43 UI modification (again & again)
    03:55:57 Flutter Launcher Icons
    04:01:44 CircleAvatar

📱 10. Responsive UI
    04:07:48 FractionallySizedBox
    04:09:55 LayoutBuilder
    04:12:41 MediaQuery
    04:14:42 AspectRatio
    04:17:40 Expanded & Flexible

🌐 11. Networking
    04:26:42 Intro
    04:29:00 Get
    04:37:56 Explain
    04:41:24 Class
    04:47:07 FutureBuilder
    04:53:41 AI

🎯 12. Next Steps
    04:58:50 Let's talk about State Management
    05:00:59 Internationalizing
    05:02:12 Firebase
    05:03:25 Publish
    05:04:30 Animations
    05:10:14 The end.
