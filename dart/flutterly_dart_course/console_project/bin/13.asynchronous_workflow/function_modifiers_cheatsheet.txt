Dart Function Modifiers Cheat Sheet

| Feature / Keyword     | `sync*` (Synchronous Generator)           | `async` (Async Function)           | `async*` (Async Generator)           |
| --------------------- | ----------------------------------------- | ---------------------------------- | ------------------------------------ |
| **Return type**       | `Iterable<T>`                             | `Future<T>`                        | `Stream<T>`                          |
| **Produces**          | Multiple values **synchronously**         | A single value **asynchronously**  | Multiple values **asynchronously**   |
| **Emit values**       | `yield`, `yield*`                         | ‚ùå Not allowed                     | `yield`, `yield*`                    |
| **Return value**      | `return value;` (ends iteration, may pass | `return value;` (completes future) | `return;` (closes stream, no value)  |
                        |   value to `Iterator.returnValue`)        |                                    |                                      |
| **`await` usage**     | ‚ùå Not allowed                           | ‚úÖ Allowed (wait for futures)      | ‚úÖ Allowed (wait for futures)        |
| **`await for` usage** | ‚ùå Not allowed                           | ‚ùå Not allowed (outside `async*`)  | ‚úÖ Allowed (consume another stream)  |
| **Example**           | dart Iterable<int> syncGen() sync*        | dart Future<int> f() async         | dart Stream<int> asyncGen() async* {  |
                        |   { yield 1; yield 2; }                   |   { await Future.delayed(          |  yield 1; await Future.delayed(
                                                                            Duration(seconds: 1));       |      Duration(seconds: 1)); yield 2; }
                                                                            return 42; }

üîπ Quick Rules to Remember
Use sync* ‚Üí when you need a lazy synchronous iterable (like generators in Python).
Use async ‚Üí when you need a single future result.
Use async* ‚Üí when you need a stream of async values.
yield / yield* ‚Üí only valid in generator functions (sync*, async*).
await / await for ‚Üí only valid in async contexts (async, async*).
Plain return value; ‚Üí works in sync* (to stop iteration with optional returnValue) and async (to complete the future).
In async*, you can only return; without a value ‚Üí to signal the stream is finished.
